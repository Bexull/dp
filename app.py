from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import requests
import joblib
from urllib.parse import urlparse
import ssl
import socket
from bs4 import BeautifulSoup
import re
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from datetime import datetime
import numpy as np
from scipy.sparse import hstack
from pymongo import MongoClient
from werkzeug.security import generate_password_hash, check_password_hash
from dotenv import load_dotenv
from web3 import Web3
import json
from contract_config import (CONTRACT_ABI, CONTRACT_ADDRESS)
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QuickNode
load_dotenv()
from dotenv import load_dotenv
import os
import hashlib


dotenv_path = os.path.join(os.path.dirname(__file__), "node_server", ".env")
load_dotenv(dotenv_path)

RPC_URL = os.getenv("RPC_URL")
PRIVATE_KEY = os.getenv("PRIVATE_KEY")
CONTRACT_ADDRESS = os.getenv("CONTRACT_ADDRESS")
WALLET_ADDRESS = os.getenv("WALLET_ADDRESS")

print(f"RPC_URL: {RPC_URL}")
print(f"PRIVATE_KEY: {PRIVATE_KEY}")
print(f"CONTRACT_ADDRESS: {CONTRACT_ADDRESS}")
print(f"WALLET_ADDRESS: {WALLET_ADDRESS}")



w3 = Web3(Web3.HTTPProvider(RPC_URL))

if w3.is_connected():
    print("‚úÖ Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–ª–æ–∫—á–µ–π–Ω—É!")
else:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É!")

with open("contract_abi.json", "r") as f:
    contract_data = json.load(f)

if isinstance(contract_data, dict) and "abi" in contract_data:
    CONTRACT_ABI = contract_data["abi"]
else:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: 'contract_abi.json' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'abi'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")





app = Flask(__name__)
app.secret_key = "your_secret_key"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
uri = "mongodb+srv://ismailfarkhat:GameOfThrones04@cluster0.e0iti.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(uri)
db = client.Url_checker  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

users_collection = db.MINE  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
history_collection = db.history  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load("url_classifier_model.pkl")
vectorizer = joblib.load("vectorizer.pkl")
safe_domains = joblib.load("safe_domains.pkl")
phishing_domains = joblib.load("phishing_domains.pkl")

VIRUSTOTAL_API_KEY = 'ab4c2ad3c4e97db57778947f4ad989d683e7f226d56981712926b03025ceec61'

# ====== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ======
@app.route("/register", methods=["POST"])
def register():
    data = request.get_json()
    username = data.get("username").strip().lower()
    email = data.get("email").strip().lower()
    password = data.get("password")

    if users_collection.find_one({"username": username}):
        return jsonify({"success": False, "message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ."})

    if users_collection.find_one({"email": email}):
        return jsonify({"success": False, "message": "E-mail —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."})

    hashed_password = generate_password_hash(password)
    new_user = {
        "username": username,
        "email": email,
        "password": hashed_password,
        "registration_date": datetime.utcnow(),  # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        "last_login": None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
    }

    users_collection.insert_one(new_user)
    return jsonify({"success": True, "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"})


@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    username = data.get("username").strip().lower()
    password = data.get("password")

    user = users_collection.find_one({"username": username})
    if user and check_password_hash(user["password"], password):
        session["user"] = username
        session["recommendation"] = None  # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
        return jsonify({"success": True})

    return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."})



# ====== –í—ã—Ö–æ–¥ ======
@app.route("/logout", methods=["GET"])
def logout():
    session.pop("user", None)
    return redirect(url_for("index"))



# ====== –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ======
# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ======
@app.route("/", methods=["GET", "POST"])
def index():
    username = session.get("user")  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recommendation = None
    user_history = []

    if request.method == "POST":
        url = request.form["url"]
        recommendation = check_url(url)

        if username:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_collection.insert_one({
                "username": username,
                "url": url,
                "timestamp": datetime.utcnow()
            })

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username:
        user_history = [entry["url"] for entry in history_collection.find({"username": username})]

    return render_template("index.html", recommendation=recommendation, username=username, history=user_history)



# ====== –î–∞—à–±–æ—Ä–¥ (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ======
@app.route("/dashboard")
def dashboard():
    if "user" not in session:
        return redirect(url_for("index"))
    return f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {session['user']}!"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
contract = w3.eth.contract(address=CONTRACT_ADDRESS, abi=CONTRACT_ABI)

# ====== –ñ–∞–ª–æ–±–∞ –Ω–∞ URL ======
from bson import ObjectId

@app.route("/report", methods=["POST"])
def report_url():
    data = request.get_json()
    url = data.get("url")

    if "user" not in session:
        return jsonify({"success": False, "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!"})

    username = session["user"]
    user = users_collection.find_one({"username": username})

    if not user:
        return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"})

    user_id = str(user["_id"])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
    email = user["email"]  # Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # üîç **–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∞–ª–æ–≤–∞–ª—Å—è –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**
    existing_complaint = history_collection.find_one({"user_id": user_id, "url": url})
    if existing_complaint:
        return jsonify({"success": False, "message": "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ —ç—Ç–æ—Ç —Å–∞–π—Ç!"})

    # üîπ –ü–æ–ª—É—á–∞–µ–º nonce –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    nonce = w3.eth.get_transaction_count(WALLET_ADDRESS, "pending")

    # üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞ –≤—Ä—É—á–Ω—É—é
    gas_price = int(w3.eth.gas_price * 1.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞ –Ω–∞ 20%

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º user_id –∏ email –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    tx = contract.functions.reportURL(url, user_id, email).build_transaction({
        "from": WALLET_ADDRESS,
        "gas": 200000,
        "gasPrice": gas_price,
        "nonce": nonce
    })

    signed_tx = w3.eth.account.sign_transaction(tx, PRIVATE_KEY)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)

    # üîπ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)  # 5 –º–∏–Ω—É—Ç

    # ‚úÖ **–°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ MongoDB**
    history_collection.insert_one({
        "user_id": user_id,
        "email": email,
        "username": username,
        "url": url,
        "timestamp": datetime.utcnow(),
        "tx_hash": tx_hash.hex()
    })

    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash.hex()}...")

    pending_tx = w3.eth.get_transaction(tx_hash)
    print(f"üìå –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {pending_tx}")

    return jsonify({"success": True, "message": "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", "tx_hash": tx_hash.hex()})



@app.route("/complaints/<path:url>", methods=["GET"])
def get_complaint_count(url):
    try:
        count = contract.functions.getComplaintCount(url).call()
        return jsonify({"url": url, "complaints": count})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±: {str(e)}"})

# ====== –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL ======
def get_domain(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc

def extract_features(url):
    parsed = urlparse(url)
    return [
        len(url),
        sum(c.isdigit() for c in url),
        parsed.netloc.count('.'),
        1 if parsed.scheme == 'https' else 0,
        len(parsed.path),
        len(parsed.query),
    ]

def check_url(url):
    try:
        if not url.startswith(('http://', 'https://')):
            return "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å http:// –∏–ª–∏ https://"

        domain = get_domain(url)
        base_url = f"{urlparse(url).scheme}://{domain}"

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–±–µ–ª—ã–µ" –∏ "—á–µ—Ä–Ω—ã–µ" —Å–ø–∏—Å–∫–∏
        if domain in safe_domains:
            return f"‚úÖ –î–æ–º–µ–Ω {domain} –≤ —Å–ø–∏—Å–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö (100%)"
        if domain in phishing_domains:
            return f"‚ö†Ô∏è –î–æ–º–µ–Ω {domain} –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö (0%)"

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal
        vt_report, vt_score = check_virustotal(url, VIRUSTOTAL_API_KEY)

        # üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ò-–º–æ–¥–µ–ª—å
        if model and vectorizer:
            url_vectorized = vectorizer.transform([base_url])
            url_features = np.array(extract_features(base_url)).reshape(1, -1)
            X_combined = hstack([url_vectorized, url_features])

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —Å–∞–π—Ç **–±–µ–∑–æ–ø–∞—Å–µ–Ω**
            safe_probability = model.predict_proba(X_combined)[0][1] * 100
            safe_probability = round(safe_probability, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º

            # üîé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (SSL, HTML, –î–æ–º–µ–Ω)
            ssl_status = check_ssl_certificate(url)
            html_status = analyze_html_content(requests.get(url, timeout=5).text)
            domain_status = analyze_domain(url)

            # üõ°Ô∏è –§–∞–∫—Ç–æ—Ä –∑–∞—â–∏—Ç—ã (0 ‚Äî –ø–ª–æ—Ö–æ–π, 1 ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π)
            protection_factor = 0
            if "‚úÖ" in ssl_status:
                protection_factor += 0.3
            if "‚úÖ" in html_status:
                protection_factor += 0.3
            if "‚úÖ" in domain_status:
                protection_factor += 0.3

            # –ï—Å–ª–∏ VirusTotal —Å—á–∏—Ç–∞–µ—Ç —Å–∞–π—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º ‚Äî –º–∏–Ω–∏–º—É–º 90%
            if vt_report == "‚úÖ VirusTotal: URL –±–µ–∑–æ–ø–∞—Å–µ–Ω.":
                safe_probability = max(safe_probability, 90)

            # –ï—Å–ª–∏ VirusTotal —Å—á–∏—Ç–∞–µ—Ç —Å–∞–π—Ç –æ–ø–∞—Å–Ω—ã–º, –Ω–æ —Å–∞–π—Ç –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            elif vt_score > 0:
                adjusted_probability = safe_probability * protection_factor
                safe_probability = max(15, adjusted_probability)

            ai_result = f"üîπ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {safe_probability}%"

        else:
            ai_result = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        # üìä –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        safety_report = ai_result
        safety_report += "\n" + vt_report  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç VirusTotal
        safety_report += "\n" + ssl_status
        safety_report += "\n" + html_status
        safety_report += "\n" + domain_status

        return safety_report

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"


def check_ssl_certificate(url):
    try:
        hostname = urlparse(url).hostname
        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert_der = ssock.getpeercert(binary_form=True)
                cert = x509.load_der_x509_certificate(cert_der, default_backend())
        not_after = cert.not_valid_after
        not_before = cert.not_valid_before
        current_time = datetime.utcnow()
        if current_time < not_before:
            return "‚ö†Ô∏è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—â—ë –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
        elif current_time > not_after:
            return "‚ö†Ô∏è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç—ë–∫."
        return "‚úÖ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
    except Exception:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."

def analyze_html_content(html_content):
    soup = BeautifulSoup(html_content, "html.parser")
    if soup.find_all("form"):
        return "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–æ—Ä–º—ã. –í–æ–∑–º–æ–∂–µ–Ω —Ñ–∏—à–∏–Ω–≥."
    return "‚úÖ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ñ–∏—à–∏–Ω–≥–∞."

def analyze_domain(url):
    domain = urlparse(url).hostname
    report = []
    if len(domain) > 30:
        report.append("‚ö†Ô∏è –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
    if re.search(r'\d', domain):
        report.append("‚ö†Ô∏è –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã.")
    if domain.count('.') > 2:
        report.append("‚ö†Ô∏è –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤.")
    return "‚úÖ –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ." if not report else "\n".join(report)

def check_virustotal(url, api_key):
    try:
        params = {'apikey': api_key, 'resource': url}
        response = requests.get("https://www.virustotal.com/vtapi/v2/url/report", params=params)
        result = response.json()

        if result.get("response_code") == 1:
            positives = result.get("positives", 0)
            if positives > 0:
                return f"‚ö†Ô∏è VirusTotal: URL –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–∞—Å–Ω—ã–π ({positives} –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤).", positives
            else:
                return "‚úÖ VirusTotal: URL –±–µ–∑–æ–ø–∞—Å–µ–Ω.", 0

        return "‚ö†Ô∏è VirusTotal: URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", -1

    except Exception:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ VirusTotal.", -1





if __name__ == "__main__":
    app.run(debug=True)
from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import requests
import joblib
from urllib.parse import urlparse
import ssl
import socket
from bs4 import BeautifulSoup
import re
from cryptography import x509
from cryptography.hazmat.backends import default_backend
import numpy as np
from scipy.sparse import hstack
from pymongo import MongoClient
from werkzeug.security import generate_password_hash, check_password_hash
from dotenv import load_dotenv
from web3 import Web3
import json

import whois
from datetime import datetime, timezone


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ QuickNode
load_dotenv()
from dotenv import load_dotenv
import os
import hashlib


dotenv_path = os.path.join(os.path.dirname(__file__), "node_server", ".env")
load_dotenv(dotenv_path)

RPC_URL = os.getenv("RPC_URL")
PRIVATE_KEY = os.getenv("PRIVATE_KEY")
CONTRACT_ADDRESS = os.getenv("CONTRACT_ADDRESS")
WALLET_ADDRESS = os.getenv("WALLET_ADDRESS")

print(f"RPC_URL: {RPC_URL}")
print(f"PRIVATE_KEY: {PRIVATE_KEY}")
print(f"CONTRACT_ADDRESS: {CONTRACT_ADDRESS}")
print(f"WALLET_ADDRESS: {WALLET_ADDRESS}")



w3 = Web3(Web3.HTTPProvider(RPC_URL))

if w3.is_connected():
    print("‚úÖ Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–ª–æ–∫—á–µ–π–Ω—É!")
else:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É!")

with open("contract_abi.json", "r") as abi_file:
    contract_abi = json.load(abi_file)


app = Flask(__name__)
app.secret_key = "your_secret_key"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
uri = "mongodb+srv://ismailfarkhat:GameOfThrones04@cluster0.e0iti.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(uri)
db = client.Url_checker  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

users_collection = db.MINE  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
history_collection = db.history  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
url_analysis_collection = db.url_analysis  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ URL


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load("url_classifier_model.pkl")
vectorizer = joblib.load("vectorizer.pkl")
safe_domains = joblib.load("safe_domains.pkl")
phishing_domains = joblib.load("phishing_domains.pkl")

VIRUSTOTAL_API_KEY = 'ab4c2ad3c4e97db57778947f4ad989d683e7f226d56981712926b03025ceec61'

# ====== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ======
@app.route("/register", methods=["POST"])
def register():
    data = request.get_json()
    username = data.get("username").strip().lower()
    email = data.get("email").strip().lower()
    password = data.get("password")

    if users_collection.find_one({"username": username}):
        return jsonify({"success": False, "message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ."})

    if users_collection.find_one({"email": email}):
        return jsonify({"success": False, "message": "E-mail —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."})

    hashed_password = generate_password_hash(password)
    new_user = {
        "username": username,
        "email": email,
        "password": hashed_password,
        "registration_date": datetime.utcnow(),  # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        "last_login": None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
    }

    users_collection.insert_one(new_user)
    return jsonify({"success": True, "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"})


@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    username = data.get("username").strip().lower()
    password = data.get("password")

    user = users_collection.find_one({"username": username})
    if user and check_password_hash(user["password"], password):
        session["user"] = username
        session["recommendation"] = None  # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
        return jsonify({"success": True})

    return jsonify({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."})



# ====== –í—ã—Ö–æ–¥ ======
@app.route("/logout", methods=["GET"])
def logout():
    session.pop("user", None)
    session.pop("recommendation", None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    return redirect(url_for("index"))


# ====== –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ======
# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ======
@app.route("/", methods=["GET", "POST"])
def index():
    username = session.get("user")
    recommendation = session.pop("recommendation", None)
    user_history = []

    if request.method == "POST":
        url = request.form["url"]
        recommendation = check_url(url)
        session["recommendation"] = recommendation  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session

        if username:
            history_collection.insert_one({
                "username": username,
                "url": url,
                "timestamp": datetime.now(timezone.utc)
            })

    if username:
        user_history = [entry["url"] for entry in history_collection.find({"username": username})]

    return render_template("index.html", recommendation=recommendation, username=username, history=user_history)

# ====== –î–∞—à–±–æ—Ä–¥ (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ======
@app.route("/dashboard")
def dashboard():
    if "user" not in session:
        return redirect(url_for("index"))
    return f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {session['user']}!"


import hashlib
from datetime import datetime, timezone
from bson import ObjectId


# üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–∞–π—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ**
def is_phishing_site_in_blockchain(site_hash):
    try:
        site_data = contract.functions.getPhishingSite(site_hash).call()
        print(f"üîç –î–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è {site_hash}: {site_data}")
        return site_data[1] > 0  # –ï—Å–ª–∏ –µ—Å—Ç—å timestamp, —Å–∞–π—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ getPhishingSite: {e}")
        return False


# üö® **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω**
def add_phishing_site(url, site_hash):
    if is_phishing_site_in_blockchain(site_hash):
        print(f"‚ö†Ô∏è –°–∞–π—Ç {url} —É–∂–µ –µ—Å—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
        return None

    try:
        tx = contract.functions.addPhishingSite(url, site_hash).build_transaction({
            'from': WALLET_ADDRESS,
            'nonce': w3.eth.get_transaction_count(WALLET_ADDRESS),
            'gas': 500000,
            'gasPrice': w3.to_wei('5', 'gwei')
        })
        receipt = send_transaction(tx)

        tx_hash = receipt.transactionHash.hex()
        print(f"üö® –§–∏—à–∏–Ω–≥–æ–≤—ã–π —Å–∞–π—Ç {url} –¥–æ–±–∞–≤–ª–µ–Ω! TX: {tx_hash}")
        return tx_hash
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞ {url} –≤ –±–ª–æ–∫—á–µ–π–Ω: {e}")
        return None


# ====== –ñ–∞–ª–æ–±–∞ –Ω–∞ URL ======
@app.route("/report", methods=["POST"])
def report_url():
    data = request.get_json()
    url = data.get("url")

    if "user" not in session:
        return jsonify({"success": False, "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!"})

    username = session["user"]
    user = users_collection.find_one({"username": username})
    if not user:
        return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"})

    user_id = str(user["_id"])
    email = user["email"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∞–ª–æ–≤–∞–ª—Å—è –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if history_collection.find_one({"user_id": user_id, "url": url}):
        return jsonify({"success": False, "message": "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ —ç—Ç–æ—Ç —Å–∞–π—Ç!"})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    try:
        nonce = w3.eth.get_transaction_count(WALLET_ADDRESS, "pending")
        gas_price = int(w3.eth.gas_price * 1.2)

        tx = contract.functions.reportURL(url, user_id).build_transaction({
            "from": WALLET_ADDRESS,
            "gas": 500000,
            "gasPrice": gas_price,
            "nonce": nonce
        })

        signed_tx = w3.eth.account.sign_transaction(tx, PRIVATE_KEY)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ –ë–î
        history_collection.insert_one({
            "user_id": user_id,
            "email": email,
            "username": username,
            "url": url,
            "timestamp": datetime.now(timezone.utc),
            "tx_hash": tx_hash.hex()
        })

        complaint_count = history_collection.count_documents({"url": url})
        print(f"‚úÖ –ñ–∞–ª–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î. –í—Å–µ–≥–æ –∂–∞–ª–æ–± –Ω–∞ {url}: {complaint_count}")

        # üõë **–î–æ–±–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω, –µ—Å–ª–∏ –∂–∞–ª–æ–± >= 2**
        if complaint_count >= 2:
            site_hash = hashlib.sha256(url.encode()).hexdigest()

            if not is_phishing_site_in_blockchain(site_hash):
                blockchain_tx_hash = add_phishing_site(url, site_hash)
                print(f"‚ö†Ô∏è –°–∞–π—Ç {url} –ø–æ–ª—É—á–∏–ª {complaint_count} –∂–∞–ª–æ–±—ã! –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω...")
                if not blockchain_tx_hash:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞ {url}.")
            else:
                print(f"‚úÖ –°–∞–π—Ç {url} —É–∂–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        return jsonify({
            "success": True,
            "message": "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            "tx_hash": tx_hash.hex(),
            "mongo_complaints": complaint_count
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
        return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã!"})



@app.route("/complaints/<path:url>", methods=["GET"])
def get_complaint_count(url):
    try:
        count = contract.functions.getComplaintCount(url).call()
        return jsonify({"url": url, "complaints": count})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±: {str(e)}"})

@app.route("/phishing-sites", methods=["GET"])
def get_phishing_sites():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π —Å–∞–π—Ç
        last_site_data = contract.functions.getLastPhishingSite().call()

        if last_site_data[1] == 0:
            return jsonify({"success": False, "message": "‚ùå –í –±–ª–æ–∫—á–µ–π–Ω–µ –Ω–µ—Ç —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤."})

        sites = []
        current_site_hash = last_site_data[2]

        # –¶–µ–ø–æ—á–∫–∞ –∑–∞–ø–∏—Å–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        for _ in range(10):
            if current_site_hash == "0x0" or current_site_hash == "":
                break  # –î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ü–µ–ø–æ—á–∫–∏

            site_data = contract.functions.getPhishingSite(current_site_hash).call()
            sites.append({
                "url": site_data[0],
                "timestamp": datetime.utcfromtimestamp(site_data[1]).strftime('%Y-%m-%d %H:%M:%S'),
                "site_hash": site_data[2],
                "prev_site_hash": site_data[3]
            })

            current_site_hash = site_data[3]  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–∞–π—Ç—É

        return jsonify({"success": True, "phishing_sites": sites})

    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"})



# ====== –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL ======
def get_domain(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc

def extract_features(url):
    parsed = urlparse(url)
    return [
        len(url),
        sum(c.isdigit() for c in url),
        parsed.netloc.count('.'),
        1 if parsed.scheme == 'https' else 0,
        len(parsed.path),
        len(parsed.query),
    ]
contract = w3.eth.contract(address=CONTRACT_ADDRESS, abi=contract_abi)
def get_complaint_count(url):
    count = contract.functions.getComplaintCount(url).call()
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ {url}: {count}")
    return count

def check_url(url):
    try:
        if not url.startswith(('http://', 'https://')):
            return "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å http:// –∏–ª–∏ https://"

        domain = get_domain(url)
        base_url = f"{urlparse(url).scheme}://{domain}"
        protocol = "HTTPS" if urlparse(url).scheme == "https" else "HTTP"

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–µ–ª–æ–º/—á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–∞—Ö
        if domain in safe_domains:
            return f"‚úÖ –î–æ–º–µ–Ω {domain} –≤ —Å–ø–∏—Å–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö (100%)"
        if domain in phishing_domains:
            return f"‚ö†Ô∏è –î–æ–º–µ–Ω {domain} –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö (0%)"

        # üîç VirusTotal
        vt_report, vt_score = check_virustotal(url, VIRUSTOTAL_API_KEY)

        # üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ò–ò
        if model and vectorizer:
            url_vectorized = vectorizer.transform([base_url])
            url_features = np.array(extract_features(base_url)).reshape(1, -1)
            X_combined = hstack([url_vectorized, url_features])

            safe_probability = model.predict_proba(X_combined)[0][1] * 100
            safe_probability = round(safe_probability, 2)

            ssl_status = check_ssl_certificate(url)
            html_status = analyze_html_content(requests.get(url, timeout=5).text)
            domain_status, domain_age_factor = get_domain_age(domain)
            external_links_status, external_links_factor = check_external_links(url)
            redirect_status, redirect_factor = check_redirects(url)

            protection_factor = (domain_age_factor + external_links_factor + redirect_factor) / 3

            if vt_report == "‚úÖ VirusTotal: URL –±–µ–∑–æ–ø–∞—Å–µ–Ω.":
                safe_probability = max(safe_probability, 90)
            elif vt_score > 0:
                adjusted_probability = safe_probability * protection_factor
                safe_probability = max(15, adjusted_probability)

            ai_result = f"üîπ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {safe_probability}%"

            complaint_count = history_collection.count_documents({"url": url})
            print(f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ {url}: {complaint_count}") # –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫

        else:
            ai_result = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."


        # üìä –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        safety_report = f"""
        üè∑Ô∏è –î–æ–º–µ–Ω: {domain}\n                                    
        üåê –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}\n                                    
        üîπ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {safe_probability}%\n                                    
        ‚úÖ VirusTotal: {vt_report}\n                                    
        üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {ssl_status}\n                                    
        üìù –ê–Ω–∞–ª–∏–∑ HTML-–∫–æ–¥–∞: {html_status}\n                                    
        üìÖ –°—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞: {domain_status}\n                                    
        üîó –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {external_links_status}\n                                    
        üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {redirect_status}\n                                    
        """

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–µ URL
        url_analysis_collection.insert_one({
            "url": url,
            "domain": domain,
            "ai_result": ai_result,
            "vt_report": vt_report,
            "domain_status": domain_status,
            "external_links_status": external_links_status,
            "redirect_status": redirect_status,
            "html_status": html_status,
            "ssl_status": ssl_status,
            "protocol": protocol,
            "timestamp": datetime.now(timezone.utc)
        })

        return safety_report

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"

def get_domain_age(domain):
    try:
        domain_info = whois.whois(domain)
        creation_date = domain_info.creation_date
        expiration_date = domain_info.expiration_date

        if isinstance(creation_date, list):
            creation_date = creation_date[0]
        if isinstance(expiration_date, list):
            expiration_date = expiration_date[0]

        if not creation_date or not expiration_date:
            return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –¥–æ–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", 0.5  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Ñ–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ UTC
        current_time = datetime.now(timezone.utc)
        domain_age_days = (current_time - creation_date).days
        days_to_expire = (expiration_date - current_time).days

        # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∏—Å–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –¥–æ–º–µ–Ω–∞
        if domain_age_days < 180:
            return f"‚ö†Ô∏è –î–æ–º–µ–Ω—É {domain_age_days} –¥–Ω–µ–π ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏—à–∏–Ω–≥!", 0.2  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        elif days_to_expire < 90:
            return f"‚ö†Ô∏è –î–æ–º–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_to_expire} –¥–Ω–µ–π ‚Äì –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ!", 0.3
        else:
            return f"‚úÖ –î–æ–º–µ–Ω—É {domain_age_days} –¥–Ω–µ–π, –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_to_expire} –¥–Ω–µ–π.", 1.0  # –ù–∞–¥—ë–∂–Ω—ã–π

    except Exception:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–æ–º–µ–Ω–∞.", 0.5  # –í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫

def check_external_links(url):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        links = soup.find_all("a", href=True)

        external_links = [link["href"] for link in links if urlparse(link["href"]).netloc not in url]
        if len(external_links) > 30:
            return f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ ({len(external_links)}) ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏—à–∏–Ω–≥!", 0.2
        return f"‚úÖ –í–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ–º–Ω–æ–≥–æ ({len(external_links)}).", 1.0
    except:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫.", 0.5

def check_redirects(url):
    try:
        response = requests.get(url, timeout=5, allow_redirects=True)
        if len(response.history) > 2:
            return f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(response.history)} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏—à–∏–Ω–≥!", 0.2
        return "‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–æ.", 1.0
    except:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.", 0.5


def check_ssl_certificate(url):
    try:
        hostname = urlparse(url).hostname
        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert_der = ssock.getpeercert(binary_form=True)
                cert = x509.load_der_x509_certificate(cert_der, default_backend())

        # üîπ –î–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        not_before = cert.not_valid_before.replace(tzinfo=timezone.utc)
        not_after = cert.not_valid_after.replace(tzinfo=timezone.utc)
        current_time = datetime.now(timezone.utc)

        if current_time < not_before:
            return "‚ö†Ô∏è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—â—ë –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
        elif current_time > not_after:
            return "‚ö†Ô∏è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç—ë–∫."

        # üîπ –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∞–±—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã)
        weak_algorithms = ["md5", "sha1"]
        signature_algorithm = cert.signature_hash_algorithm.name.lower()
        if signature_algorithm in weak_algorithms:
            return f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–∞–±—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏: {signature_algorithm.upper()}."

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        issuer = cert.issuer.rfc4514_string()
        subject = cert.subject.rfc4514_string()
        if issuer == subject:
            return "‚ö†Ô∏è –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç! –í–æ–∑–º–æ–∂–µ–Ω MITM-–∞—Ç–∞–∫."

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–º–µ–Ω–∞ (SAN)
        try:
            san_extension = cert.extensions.get_extension_for_class(x509.SubjectAlternativeName)
            domain_names = san_extension.value.get_values_for_type(x509.DNSName)
            if hostname not in domain_names:
                return f"‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è {hostname}! –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: {', '.join(domain_names)}"
        except x509.ExtensionNotFound:
            return "‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Subject Alternative Name (SAN)!"

        return f"‚úÖ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –í—ã–¥–∞–Ω: {issuer}"

    except ssl.SSLError:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π)."
    except socket.timeout:
        return "‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}"

def analyze_html_content(html_content):
    soup = BeautifulSoup(html_content, "html.parser")
    if soup.find_all("form"):
        return "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–æ—Ä–º—ã. –í–æ–∑–º–æ–∂–µ–Ω —Ñ–∏—à–∏–Ω–≥."
    return "‚úÖ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ñ–∏—à–∏–Ω–≥–∞."

def check_virustotal(url, api_key):
    try:
        params = {'apikey': api_key, 'resource': url}
        response = requests.get("https://www.virustotal.com/vtapi/v2/url/report", params=params)
        result = response.json()

        if result.get("response_code") == 1:
            positives = result.get("positives", 0)
            if positives > 0:
                return f"‚ö†Ô∏è VirusTotal: URL –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–∞—Å–Ω—ã–π ({positives} –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤).", positives
            else:
                return "‚úÖ VirusTotal: URL –±–µ–∑–æ–ø–∞—Å–µ–Ω.", 0

        return "‚ö†Ô∏è VirusTotal: URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", -1

    except Exception:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ VirusTotal.", -1

def send_transaction(txn):
    signed_txn = w3.eth.account.sign_transaction(txn, PRIVATE_KEY)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return receipt

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, threaded=True)

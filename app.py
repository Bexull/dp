from flask import Flask, render_template, request, jsonify
import requests
import joblib
from urllib.parse import urlparse
import ssl
import socket
from bs4 import BeautifulSoup
import re
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from datetime import datetime
import numpy as np
from scipy.sparse import hstack
from flask import Flask, render_template, request, redirect, url_for, flash, session
from werkzeug.security import check_password_hash

app = Flask(__name__)
app.secret_key = "your_secret_key"  # –ù—É–∂–µ–Ω –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π

# –§–∏–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é)
users = {"admin": "pbkdf2:sha256:150000$ZkG0H9‚Ä¶"}  # –ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã

@app.route("/login", methods=["POST"])
def login():
    username = request.form.get("username")
    password = request.form.get("password")

    if username in users and check_password_hash(users[username], password):
        session["user"] = username  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        return "success"  # JS –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –∏ –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    return "error"

@app.route("/dashboard")
def dashboard():
    if "user" not in session:
        return redirect(url_for("index"))
    return render_template("dashboard.html", user=session["user"])

@app.route("/welcome")
def welcome():
    return render_template("welcome.html")


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∏ —Å–ø–∏—Å–∫–æ–≤ –¥–æ–º–µ–Ω–æ–≤
model = joblib.load("url_classifier_model.pkl")
vectorizer = joblib.load("vectorizer.pkl")
safe_domains = joblib.load("safe_domains.pkl")
phishing_domains = joblib.load("phishing_domains.pkl")

# API-–∫–ª—é—á –¥–ª—è VirusTotal
VIRUSTOTAL_API_KEY = 'ab4c2ad3c4e97db57778947f4ad989d683e7f226d56981712926b03025ceec61'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞
def get_domain(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
def extract_features(url):
    parsed = urlparse(url)
    return [
        len(url),  # –î–ª–∏–Ω–∞ URL
        sum(c.isdigit() for c in url),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä
        parsed.netloc.count('.'),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
        1 if parsed.scheme == 'https' else 0,  # HTTPS –∏–ª–∏ –Ω–µ—Ç
        len(parsed.path),  # –î–ª–∏–Ω–∞ –ø—É—Ç–∏
        len(parsed.query)  # –î–ª–∏–Ω–∞ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    ]

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
def check_url(url):
    try:
        print(f"üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º URL: {url}")
        if not url.startswith(('http://', 'https://')):
            return "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å http:// –∏–ª–∏ https://"

        domain = get_domain(url)
        base_url = f"{urlparse(url).scheme}://{domain}"  # –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω

        print(f"üîπ –ò–∑–≤–ª–µ—á—ë–Ω –¥–æ–º–µ–Ω: {domain}")
        print(f"üîπ –ë–∞–∑–æ–≤—ã–π URL (–±–µ–∑ –ø—É—Ç–∏): {base_url}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–ª–∏ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–ø–∏—Å–∫–∞—Ö
        if domain in safe_domains:
            return f"‚úÖ –î–æ–º–µ–Ω {domain} –≤ —Å–ø–∏—Å–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö. –í–µ—Å—å —Å–∞–π—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º."
        if domain in phishing_domains:
            return f"‚ö†Ô∏è –î–æ–º–µ–Ω {domain} –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö. –í–µ—Å—å —Å–∞–π—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–ø–∞—Å–Ω—ã–º."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        try:
            response = requests.get(url, timeout=5)
            if response.status_code != 200:
                return f"‚ö†Ô∏è –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {response.status_code})."
        except requests.exceptions.RequestException:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –ò–ò
        if model and vectorizer:
            url_vectorized = vectorizer.transform([base_url])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω!
            url_features = np.array(extract_features(base_url)).reshape(1, -1)
            X_combined = hstack([url_vectorized, url_features])

            prediction = model.predict(X_combined)[0]
            ai_result = "‚úÖ –ú–æ–¥–µ–ª—å –ò–ò —Å—á–∏—Ç–∞–µ—Ç —Å–∞–π—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º." if prediction == 1 else "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ò–ò —Å—á–∏—Ç–∞–µ—Ç —Å–∞–π—Ç –æ–ø–∞—Å–Ω—ã–º."
        else:
            ai_result = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        # –ê–Ω–∞–ª–∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        safety_report = ai_result
        safety_report += "\n" + check_ssl_certificate(url)
        safety_report += "\n" + analyze_html_content(response.text)
        safety_report += "\n" + analyze_domain(url)
        safety_report += "\n" + check_virustotal(url, VIRUSTOTAL_API_KEY)

        return safety_report
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_url: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
def check_ssl_certificate(url):
    try:
        hostname = urlparse(url).hostname
        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert_der = ssock.getpeercert(binary_form=True)
                cert = x509.load_der_x509_certificate(cert_der, default_backend())
        not_after = cert.not_valid_after
        not_before = cert.not_valid_before
        current_time = datetime.utcnow()
        if current_time < not_before:
            return "‚ö†Ô∏è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—â—ë –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
        elif current_time > not_after:
            return "‚ö†Ô∏è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç—ë–∫."
        return "‚úÖ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
def analyze_html_content(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    report = []
    if soup.find_all('form'):
        report.append("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–æ—Ä–º—ã. –í–æ–∑–º–æ–∂–µ–Ω —Ñ–∏—à–∏–Ω–≥.")
    return "‚úÖ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ñ–∏—à–∏–Ω–≥–∞." if not report else "\n".join(report)

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–∞
def analyze_domain(url):
    domain = urlparse(url).hostname
    report = []
    if len(domain) > 30:
        report.append("‚ö†Ô∏è –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
    if re.search(r'\d', domain):
        report.append("‚ö†Ô∏è –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã.")
    if domain.count('.') > 2:
        report.append("‚ö†Ô∏è –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤.")
    return "‚úÖ –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ." if not report else "\n".join(report)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ VirusTotal
def check_virustotal(url, api_key):
    try:
        params = {'apikey': api_key, 'resource': url}
        response = requests.get('https://www.virustotal.com/vtapi/v2/url/report', params=params)
        result = response.json()
        if result.get('response_code') == 1:
            positives = result.get('positives', 0)
            return f"‚ö†Ô∏è VirusTotal: URL –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–∞—Å–Ω—ã–π ({positives} –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤)." if positives > 0 else "‚úÖ VirusTotal: URL –±–µ–∑–æ–ø–∞—Å–µ–Ω."
        return "‚ö†Ô∏è VirusTotal: URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ VirusTotal: {e}"

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/', methods=['GET', 'POST'])
def index():
    recommendation = None
    if request.method == 'POST':
        url = request.form['url']
        recommendation = check_url(url)
    return render_template('index.html', recommendation=recommendation)

if __name__ == '__main__':
    app.run(debug=True)
